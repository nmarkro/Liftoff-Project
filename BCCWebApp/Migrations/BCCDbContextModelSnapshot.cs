// <auto-generated />
using System;
using BCCWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BCCWebApp.Migrations
{
    [DbContext(typeof(BCCDbContext))]
    partial class BCCDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BCCWebApp.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Battles")
                        .HasColumnType("int");

                    b.Property<string>("NaviCode")
                        .HasColumnType("varchar(24) CHARACTER SET utf8mb4")
                        .HasMaxLength(24);

                    b.Property<string>("NaviName")
                        .HasColumnType("varchar(4) CHARACTER SET utf8mb4")
                        .HasMaxLength(4);

                    b.Property<string>("TwitchUserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TwitchUserId");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("BCCWebApp.Models.TwitchUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("AccessToken")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Login")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("TwitchUsers");
                });

            modelBuilder.Entity("BCCWebApp.Models.User", b =>
                {
                    b.Property<string>("TwitchUserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int?>("CurrentDeckId")
                        .HasColumnType("int");

                    b.Property<bool>("TorunamentRegistered")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TotalBattles")
                        .HasColumnType("int");

                    b.Property<int>("TotalWins")
                        .HasColumnType("int");

                    b.HasKey("TwitchUserId");

                    b.HasIndex("CurrentDeckId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BCCWebApp.Models.Deck", b =>
                {
                    b.HasOne("BCCWebApp.Models.TwitchUser", "TwitchUser")
                        .WithMany()
                        .HasForeignKey("TwitchUserId");
                });

            modelBuilder.Entity("BCCWebApp.Models.User", b =>
                {
                    b.HasOne("BCCWebApp.Models.Deck", "CurrentDeck")
                        .WithMany()
                        .HasForeignKey("CurrentDeckId");

                    b.HasOne("BCCWebApp.Models.TwitchUser", "TwitchUser")
                        .WithMany()
                        .HasForeignKey("TwitchUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
